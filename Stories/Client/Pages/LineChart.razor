<!--
    The MIT License (MIT)

    Copyright (c) 2020 Martijn Storck

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    source: https://github.com/martijn/BlazorCharts
-->

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 @(GraphWidth + 100) @GraphHeight">
    <g stroke="gray" text-anchor="end">
        <text x="60" y="15" style="font-size: x-small; color: gray">@Max</text>
        <line x1="70" x2="70" y1="10" y2="@ZeroY" />
        <line x1="70" x2="@(GraphWidth + 68)" y1="@ZeroY" y2="@ZeroY"/>
    </g>


    <g stroke="darkblue" text-anchor="end">
        <text class="outline" x="60" y="@(Ypos(ValuesPrimary[0]))">Downloads</text>
        <text x="60" y="@(Ypos(ValuesPrimary[0]))" style="font-size: x-small">Downloads</text>
    </g>
    
    <g stroke="steelblue" text-anchor="end">
        <text class="outline" x="60" y="@(Ypos(ValuesSecondary[0]))">Views</text>
        <text x="60" y="@(Ypos(ValuesSecondary[0]))" style="font-size: x-small">Views</text>
    </g>

    <g>
        <polyline stroke="darkblue"  fill="none" stroke-width="3" points="@PointList" />
        <polyline stroke="steelblue" fill="none" stroke-width="3" points="@PointListSecondary" />
    </g>

    @foreach (var (x, y) in ValuesPrimary.Select((value, index) => (index, value)))
    {
        <circle cx=@(Xpos(x)) cy=@(Ypos(y)) r="4" fill=@(x == _selectedPoint ? "lightblue" : "black")/>
        @* Render a transparent circle with a larger radius to provide a proper hitbox *@
        <circle cx=@(Xpos(x)) cy=@(Ypos(y)) r="20" fill="transparent" @onclick=@(_ => _selectedPoint = x)/>
    }

    @foreach (var (x, y) in ValuesSecondary.Select((value, index) => (index, value)))
    {
        <circle cx=@(Xpos(x)) cy=@(Ypos(y)) r="4" fill=@(x == _selectedPoint ? "lightblue" : "black")/>
        @* Render a transparent circle with a larger radius to provide a proper hitbox *@
        <circle cx=@(Xpos(x)) cy=@(Ypos(y)) r="20" fill="transparent" @onclick=@(_ => _selectedPoint = x)/>
    }

    @if (_selectedPoint != null)
    {
        <g text-anchor="middle">
            <text x=@(Xpos(_selectedPoint.Value)) y=@(ZeroY + 12) style="font-size: x-small; font-weight: bold">@SelectedPointInfo</text>
        </g>
    }
</svg>

@code {
    [CascadingParameter(Name = "DownloadsList")]
    public List<double> ValuesPrimary { get; set; } = new();

    [CascadingParameter(Name = "ViewsList")]
    public List<double> ValuesSecondary { get; set; } = new();

    [CascadingParameter(Name = "DateStrings")]
    public List<string> Dates { get; set; } = new();

    private double Max { get; set; }
    private double Min { get; set; } = -1;

    private int? _selectedPoint;

    private const double GraphHeight = 300.0;
    private const double GraphWidth = 500.0;

    private double GraphRange => Math.Abs(Max) + Math.Abs(Min);
    private double ZeroY => Math.Abs(Max) / GraphRange * GraphHeight;

    private double Xpos(int x)
    {
        return ValuesPrimary.Count > 1 ? 70.0 + x * (GraphWidth / (ValuesPrimary.Count - 1)) : GraphWidth / 2.0;
    }

    private double Ypos(double y) => ZeroY - y * (GraphHeight / GraphRange);

    // Convert Values to a list of coordinates for the polyline SVG element
    private string PointList =>
        string.Join(" ",
            ValuesPrimary.Select(
                (y, index) => $"{Xpos(index)},{Ypos(y)}"
                )
            );
    private string PointListSecondary =>
        string.Join(" ",
            ValuesSecondary.Select(
                (y, index) => $"{Xpos(index)},{Ypos(y)}"
                )
            );

    private string SelectedPointInfo => (_selectedPoint is null) ? string.Empty : $"{Dates[_selectedPoint.Value]}";

    protected override void OnInitialized()
    {
        // set the height of the y axis on the line chart

        double valuesPrimaryMax = ValuesPrimary.Max();
        double valuesSecondaryMax = ValuesSecondary.Max();
        Max = valuesPrimaryMax < valuesSecondaryMax ? valuesSecondaryMax : valuesPrimaryMax;
        Max++;
    }
}
