@page "/AddStory"

@attribute [Authorize]

@using System.IO
@using System.Text.Json
@using System.Net.Http.Headers

@using Stories.Shared

@inject HttpClient http

<h1>Add New Story</h1>

<!-- todo: revisit the code block below -->
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @bootstrapAlertType mt-4" role="alert">

        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-circle" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z" />
        </svg>

        <strong>Finished</strong>
        <br />

        @statusMessage

    </div>
}

@if (imgUrl != string.Empty)
{
    <img src="@imgUrl">
}

<p />

<EditForm Model="@story" OnSubmit="@AddStoryAsync">

    <InputText class="form-control" @bind-Value="story.Title" />
    <InputTextArea class="form-control" @bind-Value="story.Text" rows="20" />

    <br />
    <button class="btn btn-primary" type="submit">Add</button>
</EditForm>


@code {

    public class StoryModel
    {
        public string Title { get; set; } = string.Empty;
        public string Text  { get; set; } = string.Empty;
    }


    private StoryModel story = new();

    const int STORY_TEXT_MAX_CHARACTER_LENGTH = 2000;


    string imgUrl = string.Empty;

    string bootstrapAlertType = "alert-success";
    string statusMessage = string.Empty;



    private async Task AddStoryAsync()
    {
        if (string.IsNullOrEmpty(story.Text)) return;


        // todo: remove < > from string

        HttpResponseMessage response =
            await http.GetAsync(
                "https://api.imgbun.com/png?key=f47fb593fd54e825bb029ad9e1d8deab&text=" + story.Text.Substring(0, Min(499, story.Text.Length))
            );

        if (response.IsSuccessStatusCode)
        {
            string r = await response.Content.ReadAsStringAsync();
            imgUrl = JsonSerializer.Deserialize<Dictionary<string, string>>(r)?["direct_link"] ?? string.Empty;

            await PostStoryToServerAsync();

            story.Title = string.Empty;
            story.Text  = string.Empty;
        }
        else
        {
            bootstrapAlertType = "alert-danger";
            statusMessage = response.ReasonPhrase ?? string.Empty;
        }
    }

    private int Min(int first, int second) => first < second ? first : second;

    private async Task PostStoryToServerAsync()
    {

        string storytext  = story.Text.Trim();
        string storytitle = story.Title.Trim();


        if (storytext.Length > STORY_TEXT_MAX_CHARACTER_LENGTH)
            storytext = string.Concat(
                storytext.Substring(0, STORY_TEXT_MAX_CHARACTER_LENGTH),
                Environment.NewLine,
                Environment.NewLine,
                $"... We're sorry, this story exceeded the maximum length for images ({STORY_TEXT_MAX_CHARACTER_LENGTH} characters). Please read the story ending online."
            );


        StringContent postRequestBody =
        new (
            string.Join(
                Environment.NewLine,
                storytitle,
                imgUrl,
                storytext
            )
        );

        HttpResponseMessage result = await http.PostAsync("SaveFile", postRequestBody);

        if( result.IsSuccessStatusCode )
        {
            bootstrapAlertType = "alert-success";
            statusMessage = imgUrl;
        }
    }
}
