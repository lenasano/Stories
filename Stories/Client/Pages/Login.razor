@page "/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using AdaptiveCards.Blazor.Actions
@using Stories.Client.Services

@inject HttpClient http
@inject NavigationManager navigation
@inject MockupAuthenticationStateProvider authentication


<!-- login component taken from https://github.com/cornflourblue/blazor-webassembly-registration-login-example -->

<div class="alert @StatusClass">@StatusMessage</div>

<div class="col-md-6 offset-md-3 mt-5">

    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@loginInfo" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="loginInfo.Username" class="form-control" />
                    <ValidationMessage For="@(() => loginInfo.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="loginInfo.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => loginInfo.Password)" />
                </div>
                <br />
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading)
                    {
                           <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </EditForm>
        </div>
    </div>

</div>


@code {
    private class LoginInfo
    {
        [Required] public string? Username { get; set; }
        [Required] public string? Password { get; set; }
    }

    private LoginInfo loginInfo = new ();
    private bool loading;

    private string StatusClass = string.Empty;
    private string StatusMessage = string.Empty;

    private void OnValidSubmit()
    {
        // reset alerts on submit
        StatusClass = string.Empty;
        StatusMessage = string.Empty;


        loading = true;

        if (authentication.MockSignIn(loginInfo.Username, loginInfo.Password))
            navigation.NavigateTo("/");
        else
        {
            StatusClass = "alert-danger";
            StatusMessage = "Oops! Could not authenticate login name and password.";
            loading = false;
        }
    }
}